<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Studio Carla Borges - Sistema de Gestão v3.0 (Login)</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500;700&family=Inter:wght@400;600&display=swap" rel="stylesheet">
    
    <!-- Chart.js for reports -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
        :root {
            --cor-principal: #4A90E2; /* Azul Corporativo Moderno */
            --cor-principal-hover: #3A75C4; /* Azul mais escuro para hover */
            --cor-fundo: #F8F9FA;      /* Cinza muito claro (Bootstrap) */
            --cor-card: #FFFFFF;       /* Branco para os cards */
            --cor-texto: #343A40;      /* Cinza escuro para texto (Bootstrap) */
            --cor-titulo: #2c3e50;     /* Azul ardósia escuro para títulos */
            --cor-borda: #dee2e6;      /* Cinza claro para bordas (Bootstrap) */
            --cor-sucesso: #198754;     /* Verde para sucesso (Bootstrap 5.3) */
            --cor-perigo: #dc3545;      /* Vermelho para perigo */
            --cor-aviso: #ffc107;     /* Amarelo para aviso */
            --cor-info: #0dcaf0;       /* Azul claro para info */
            --fonte-titulo: 'Poppins', sans-serif;
            --fonte-corpo: 'Inter', sans-serif;
        }

        body {
            background-color: var(--cor-fundo);
            font-family: var(--fonte-corpo);
            color: var(--cor-texto);
        }

        h1, h2, h3, h4, h5, h6 {
            font-family: var(--fonte-titulo);
            color: var(--cor-titulo);
            font-weight: 700;
        }
        
        .container-app {
             max-width: 1600px;
        }

        .card {
            border: 1px solid var(--cor-borda);
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            background-color: var(--cor-card);
        }

        .nav-tabs {
            border-bottom: 2px solid var(--cor-borda);
        }

        .nav-tabs .nav-link {
            color: var(--cor-texto);
            border-radius: 8px 8px 0 0;
            border: 1px solid transparent;
            border-bottom: 2px solid transparent;
            padding: 0.75rem 1.25rem;
            font-weight: 600;
            transition: all 0.2s ease-in-out;
        }

        .nav-tabs .nav-link.active {
            color: var(--cor-principal);
            border-color: var(--cor-borda) var(--cor-borda) var(--cor-card);
            border-bottom: 2px solid var(--cor-principal);
            background-color: var(--cor-card);
        }

        .nav-tabs .nav-link:hover:not(.active) {
            border-color: transparent;
            background-color: #e9ecef;
            color: var(--cor-principal);
        }

        .btn-primary {
            background-color: var(--cor-principal);
            border-color: var(--cor-principal);
            color: white;
            font-weight: 600;
            border-radius: 8px;
            transition: background-color 0.3s ease;
            padding: 0.5rem 1.25rem;
        }

        .btn-primary:hover {
            background-color: var(--cor-principal-hover);
            border-color: var(--cor-principal-hover);
        }

        .form-control, .form-select {
            border-radius: 8px;
            border: 1px solid var(--cor-borda);
            padding: 0.5rem 1rem;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--cor-principal);
            box-shadow: 0 0 0 0.25rem rgba(74, 144, 226, 0.25);
        }

        .table {
            border-color: var(--cor-borda);
            vertical-align: middle;
        }

        .table thead {
             border-bottom: 2px solid var(--cor-titulo);
        }

        .table th {
            font-family: var(--fonte-titulo);
            color: var(--cor-titulo);
            font-size: 0.9rem;
            text-transform: uppercase;
            font-weight: 500;
        }

        .table-hover > tbody > tr:hover > * {
            background-color: #eef5fc;
        }

        .action-icon {
            cursor: pointer;
            margin: 0 6px;
            opacity: 0.7;
            transition: all 0.2s ease-in-out;
            transform-origin: center;
        }
        .action-icon:hover {
            opacity: 1;
            transform: scale(1.1);
        }
        
        .loading-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(248, 249, 250, 0.7);
            z-index: 9999;
            display: flex; align-items: center; justify-content: center;
        }
        .toast-container { z-index: 1100; }
        
        .badge {
            font-weight: 600;
            font-size: 0.75rem;
            padding: 0.4em 0.8em;
        }
        
        .summary-card {
            border-left-width: 5px;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .summary-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.08);
        }
        .summary-card .icon {
            font-size: 2.5rem;
            opacity: 0.2;
        }
        .summary-card-success { border-left-color: var(--cor-sucesso); }
        .summary-card-warning { border-left-color: var(--cor-aviso); }
        .summary-card-danger { border-left-color: var(--cor-perigo); }
        .summary-card-info { border-left-color: var(--cor-info); }
        .summary-card-primary { border-left-color: var(--cor-principal); }

        .form-check-presenca .form-check-input {
            cursor: pointer;
        }
        .form-check-presenca .form-check-label {
            cursor: pointer;
            padding-left: 0.3em;
        }
        .aluno-presente {
            text-decoration: line-through;
            opacity: 0.6;
        }
        .alert-badge {
            font-size: 0.6rem;
            vertical-align: super;
            margin-left: 5px;
        }
        
        /* Estilos Login */
        #login-section {
            max-width: 400px;
            margin: 5rem auto;
        }
        #main-app-section {
            display: none; /* Começa escondido */
        }
        #user-info {
            display: none; /* Começa escondido */
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 0.9rem;
            text-align: right;
        }
        #user-info span { font-weight: bold; }

        /* Estilo da Logo */
        #app-logo {
            display: block;
            margin: 0 auto 1.5rem auto; /* Centraliza e adiciona margem abaixo */
            max-height: 80px; /* Ajuste a altura máxima conforme necessário */
            width: auto; /* Mantém a proporção */
        }

    </style>
</head>
<body>

<!-- Indicador de Carregamento Inicial -->
<div class="loading-overlay" id="initial-loading">
    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem; --bs-spinner-border-width: 0.3rem; color: var(--cor-principal) !important;">
        <span class="visually-hidden">Carregando...</span>
    </div>
</div>

<!-- Seção de Login -->
<div id="login-section" class="container">
    <div class="card p-4 p-md-5">
        <h3 class="text-center mb-4">Login - Studio Carla Borges</h3>
        <form id="login-form">
            <div class="mb-3">
                <label for="login-email" class="form-label">E-mail</label>
                <input type="email" class="form-control" id="login-email" required>
            </div>
            <div class="mb-3">
                <label for="login-password" class="form-label">Senha</label>
                <input type="password" class="form-control" id="login-password" required>
            </div>
            <div class="d-grid">
                <button type="submit" class="btn btn-primary">Entrar</button>
            </div>
            <div id="login-error" class="text-danger mt-3 text-center" style="display: none;"></div>
        </form>
    </div>
</div>


<!-- Seção Principal da Aplicação (Conteúdo Original) -->
<div id="main-app-section">
    <!-- Informações do Usuário Logado -->
    <div id="user-info" class="text-muted">
        Logado como: <span id="user-email"></span><br>
        <button id="logout-button" class="btn btn-sm btn-outline-secondary mt-1">Sair</button>
    </div>

    <div class="container-app mt-4 mb-5">
        
        <!-- Logo adicionada aqui -->
        <img id="app-logo" src="https://placehold.co/200x80/4A90E2/FFFFFF?text=Sua+Logo+Aqui" alt="Logomarca Studio Carla Borges" onerror="this.src='https://placehold.co/200x80/cccccc/FFFFFF?text=Logo'; this.onerror=null;">

        <div class="text-center mb-5">
            <h2 style="font-size: 2.5rem; color: var(--cor-titulo);">Studio Carla Borges</h2>
            <p class="text-muted" style="font-size: 1.1rem;">Sistema de Gestão</p>
        </div>

        <!-- Abas de Navegação -->
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation"><button class="nav-link active" id="inicio-tab" data-bs-toggle="tab" data-bs-target="#inicio-pane" type="button">Início</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" id="financeiro-tab" data-bs-toggle="tab" data-bs-target="#financeiro-pane" type="button">Financeiro</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" id="caixa-tab" data-bs-toggle="tab" data-bs-target="#caixa-pane" type="button">Controle de Caixa</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" id="alunos-tab" data-bs-toggle="tab" data-bs-target="#alunos-pane" type="button">Alunos</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" id="aulas-tab" data-bs-toggle="tab" data-bs-target="#aulas-pane" type="button">Aulas</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" id="config-tab" data-bs-toggle="tab" data-bs-target="#config-pane" type="button">Configurações</button></li>
        </ul>

        <!-- Conteúdo das Abas -->
        <div class="tab-content" id="myTabContent">
            
            <!-- Aba Início -->
            <div class="tab-pane fade show active" id="inicio-pane" role="tabpanel">
                <div class="card border-top-0 rounded-0 rounded-bottom"><div class="card-body p-4 p-md-5">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h5 class="card-title mb-0">Programação do Dia</h5>
                        <h6 class="mb-0" id="dia-da-semana-titulo"></h6>
                    </div>
                    <div id="programacao-do-dia"><p class="text-center p-5">Carregando programação...</p></div>
                </div></div>
            </div>
            
            <!-- Aba Financeiro -->
            <div class="tab-pane fade" id="financeiro-pane" role="tabpanel">
                <div class="card border-top-0 rounded-0 rounded-bottom"><div class="card-body p-4 p-md-5">
                    <div class="d-flex justify-content-between align-items-center flex-wrap gap-2 mb-4">
                        <h5 class="card-title mb-0">Dashboard Financeiro</h5>
                        <h6 id="mes-ano-financeiro" class="text-muted fw-normal"></h6>
                    </div>
                    
                    <!-- Dashboard de Resumo Financeiro -->
                    <div class="row mb-4">
                        <div class="col-lg col-md-6 mb-3">
                            <div class="card summary-card summary-card-success h-100"><div class="card-body">
                                <h6 class="card-subtitle text-muted text-uppercase small">Receita (Aulas)</h6>
                                <span class="h4" id="resumo-receita-aulas">R$ 0,00</span>
                            </div></div>
                        </div>
                         <div class="col-lg col-md-6 mb-3">
                            <div class="card summary-card summary-card-success h-100"><div class="card-body">
                                <h6 class="card-subtitle text-muted text-uppercase small">Receita (Matrículas)</h6>
                                <span class="h4" id="resumo-receita-matriculas">R$ 0,00</span>
                            </div></div>
                        </div>
                         <div class="col-lg col-md-6 mb-3">
                            <div class="card summary-card summary-card-info h-100"><div class="card-body">
                                <h6 class="card-subtitle text-muted text-uppercase small">Outras Entradas</h6>
                                <span class="h4" id="resumo-outras-entradas">R$ 0,00</span>
                            </div></div>
                        </div>
                         <div class="col-lg col-md-6 mb-3">
                            <div class="card summary-card summary-card-danger h-100"><div class="card-body">
                                <h6 class="card-subtitle text-muted text-uppercase small">Total Despesas</h6>
                                <span class="h4" id="resumo-despesas">R$ 0,00</span>
                            </div></div>
                        </div>
                        <div class="col-lg col-md-6 mb-3">
                            <div class="card summary-card summary-card-primary h-100"><div class="card-body">
                                <h6 class="card-subtitle text-muted text-uppercase small">Balanço do Mês</h6>
                                <span class="h4" id="resumo-balanco">R$ 0,00</span>
                            </div></div>
                        </div>
                        <div class="col-lg col-md-6 mb-3">
                            <div class="card summary-card summary-card-warning h-100"><div class="card-body">
                                <h6 class="card-subtitle text-muted text-uppercase small">A Receber (Alunos) <span id="alert-badge-a-receber" class="badge bg-danger rounded-pill alert-badge" style="display: none;">!</span></h6>
                                <span class="h4" id="resumo-a-receber">R$ 0,00</span>
                            </div></div>
                        </div>
                    </div>

                    <hr class="my-5">

                    <div class="row">
                        <div class="col-lg-6 mb-4 mb-lg-0">
                            <h5 class="mb-3">Análise Financeira</h5>
                            <div class="card mb-3">
                                <div class="card-body">
                                    <p class="card-text">Selecione o período para gerar um balancete detalhado com gráfico e todas as transações.</p>
                                    <div class="row g-2 align-items-end">
                                        <div class="col"><label for="relatorio-mes">Mês</label><select id="relatorio-mes" class="form-select"></select></div>
                                        <div class="col"><label for="relatorio-ano">Ano</label><select id="relatorio-ano" class="form-select"></select></div>
                                        <div class="col-auto"><button class="btn btn-primary" id="btn-gerar-balancete">Gerar PDF</button></div>
                                    </div>
                                </div>
                            </div>
                             <div class="card">
                                <div class="card-body">
                                    <p class="card-text">Gere um relatório focado nos alunos com pagamentos pendentes.</p>
                                    <button class="btn btn-warning" id="btn-gerar-relatorio-inadimplencia">Relatório de Inadimplência (PDF)</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                             <h5 class="mb-3">Previsão de Receita (Alunos)</h5>
                             <div class="table-responsive">
                                 <table class="table table-sm table-bordered">
                                     <thead class="table-light">
                                         <tr><th>Mês</th><th>Previsão</th></tr>
                                     </thead>
                                     <tbody id="tabela-previsao">
                                     </tbody>
                                 </table>
                             </div>
                        </div>
                    </div>
                    
                    <hr class="my-5">

                    <h5 class="card-title mb-4">Gestão de Mensalidades</h5>
                    <div class="d-flex justify-content-between align-items-center flex-wrap gap-2 mb-4">
                        <div class="btn-group" role="group" id="filtros-financeiro">
                            <button type="button" class="btn btn-outline-secondary active" data-filtro="todos">Todos</button>
                            <button type="button" class="btn btn-outline-secondary" data-filtro="pendente">Pendentes</button>
                            <button type="button" class="btn btn-outline-secondary" data-filtro="pago">Pagos</button>
                            <button type="button" class="btn btn-outline-secondary" data-filtro="atrasado">Atrasados</button>
                        </div>
                        <div>
                            <button class="btn btn-primary btn-sm" id="btn-gerar-mensalidades">Verificar e Gerar Mensalidades</button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Aluno / Descrição</th>
                                    <th>Vencimento</th>
                                    <th>Valor</th>
                                    <th>Status</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody id="tabela-financeiro"></tbody>
                        </table>
                    </div>

                </div></div>
            </div>
            
            <!-- Aba Caixa -->
            <div class="tab-pane fade" id="caixa-pane" role="tabpanel">
                 <div class="card border-top-0 rounded-0 rounded-bottom"><div class="card-body p-4 p-md-5">
                    <h5 class="card-title mb-4">Lançamentos de Caixa</h5>
                    <form id="form-caixa" class="row g-3 align-items-end mb-4">
                        <input type="hidden" id="caixa-id">
                        <div class="col-sm-3"><label class="form-label">Descrição</label><input type="text" id="caixa-descricao" class="form-control" required></div>
                        <div class="col-sm-2"><label class="form-label">Valor (R$)</label><input type="number" step="0.01" id="caixa-valor" class="form-control" required min="0.01"></div>
                        <div class="col-sm-2"><label class="form-label">Data</label><input type="date" id="caixa-data" class="form-control" required></div>
                        <div class="col-sm-2"><label class="form-label">Categoria</label><input type="text" id="caixa-categoria" class="form-control" list="categorias-list" placeholder="Ex: Aluguel, Venda"></div>
                        <div class="col-sm-1"><label class="form-label">Tipo</label><select id="caixa-tipo" class="form-select" required>
                            <option value="entrada">Entrada</option>
                            <option value="saida">Saída</option>
                        </select></div>
                        <div class="col-sm-2"><button type="submit" class="btn btn-primary w-100">Lançar</button></div>
                        <div class="col-12"><button type="button" id="btn-cancelar-edicao-caixa" class="btn btn-secondary" style="display: none;">Cancelar Edição</button></div>
                    </form>
                     <hr class="my-4">
                    <h6 class="mb-3">Histórico de Lançamentos</h6>
                     <div class="table-responsive"><table class="table table-hover">
                        <thead><tr><th>Descrição</th><th>Categoria</th><th>Data</th><th>Tipo</th><th>Valor</th><th>Ações</th></tr></thead>
                        <tbody id="tabela-caixa"></tbody>
                    </table></div>
                     <!-- Datalist para sugestões de categorias -->
                     <datalist id="categorias-list">
                        <option value="Aluguel">
                        <option value="Água">
                        <option value="Luz">
                        <option value="Internet">
                        <option value="Material de Limpeza">
                        <option value="Material de Escritório">
                        <option value="Venda de Produto">
                        <option value="Aula Avulsa">
                        <option value="Outros">
                     </datalist>
                </div></div>
            </div>


            <!-- Aba Alunos -->
            <div class="tab-pane fade" id="alunos-pane" role="tabpanel">
                <div class="card border-top-0 rounded-0 rounded-bottom"><div class="card-body p-4 p-md-5">
                    <h5 class="card-title mb-4" id="alunos-card-title">Cadastro de Alunos</h5>
                    <form id="form-aluno">
                        <input type="hidden" id="aluno-id">
                        <div class="row">
                            <div class="col-md-5 mb-3"><label class="form-label">Nome Completo</label><input type="text" id="aluno-nome" class="form-control" required></div>
                            <div class="col-md-4 mb-3"><label class="form-label">Telefone</label><input type="tel" id="aluno-telefone" class="form-control" placeholder="(31) 99999-9999" pattern="\([0-9]{2}\) [0-9]{5}-[0-9]{4}" title="Formato: (XX) XXXXX-XXXX"></div>
                            <div class="col-md-3 mb-3"><label class="form-label">Dia Vencimento</label><input type="number" id="aluno-dia-vencimento" class="form-control" min="1" max="31" value="10" required></div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3"><label class="form-label">Turma</label><select id="aluno-turma" class="form-select" required><option selected disabled value="">Selecione...</option></select></div>
                            <div class="col-md-4 mb-3"><label class="form-label">Plano de Pagamento</label><select id="aluno-plano" class="form-select" required><option selected disabled value="">Selecione...</option></select></div>
                            <div class="col-md-4 mb-3"><label class="form-label">Bolsa de Estudo</label><select id="aluno-bolsa" class="form-select">
                                <option value="0" selected>Não é bolsista</option>
                                <option value="10">Bolsista 10%</option>
                                <option value="20">Bolsista 20%</option>
                                <option value="50">Bolsista 50%</option>
                                <option value="100">Bolsista 100%</option>
                            </select></div>
                        </div>
                        <div class="row align-items-end">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Valor da Matrícula (R$)</label>
                                <input type="number" step="0.01" id="aluno-matricula-valor" class="form-control" value="100.00" min="0">
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="form-check pt-4">
                                    <input class="form-check-input" type="checkbox" id="aluno-matricula-isento">
                                    <label class="form-check-label" for="aluno-matricula-isento">
                                        Isento de Matrícula
                                    </label>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Salvar Aluno</button>
                        <button type="button" class="btn btn-secondary" id="btn-cancelar-edicao-aluno" style="display: none;">Cancelar</button>
                    </form>
                    <hr class="my-4">
                    <h6 class="mb-3">Alunos Cadastrados</h6>
                    <div class="table-responsive"><table class="table table-hover"><thead><tr><th>Nome</th><th>Plano</th><th>Bolsa</th><th>Vencimento</th><th>Ações</th></tr></thead><tbody id="tabela-alunos"></tbody></table></div>
                </div></div>
            </div>

            <!-- Aba Aulas -->
            <div class="tab-pane fade" id="aulas-pane" role="tabpanel">
                <div class="card border-top-0 rounded-0 rounded-bottom"><div class="card-body p-4 p-md-5">
                    <h5 class="card-title mb-4">Cadastro de Aulas e Horários</h5>
                    <form id="form-aula">
                        <input type="hidden" id="aula-id">
                        <div class="row">
                            <div class="col-md-6 mb-3"><label class="form-label">Nome da Turma</label><input type="text" id="aula-nome" class="form-control" required></div>
                            <div class="col-md-3 mb-3"><label class="form-label">Horário</label><input type="time" id="aula-horario" class="form-control" required></div>
                            <div class="col-md-3 mb-3"><label class="form-label">Vagas</label><input type="number" id="aula-vagas" class="form-control" min="1" placeholder="Ilimitado"></div>
                        </div>
                        <div class="mb-3"><label class="form-label d-block">Dias da Semana</label>
                            <div id="aula-dias-semana">
                                <div class="form-check form-check-inline"><input class="form-check-input" type="checkbox" id="seg" value="seg"><label class="form-check-label" for="seg">Seg</label></div>
                                <div class="form-check form-check-inline"><input class="form-check-input" type="checkbox" id="ter" value="ter"><label class="form-check-label" for="ter">Ter</label></div>
                                <div class="form-check form-check-inline"><input class="form-check-input" type="checkbox" id="qua" value="qua"><label class="form-check-label" for="qua">Qua</label></div>
                                <div class="form-check form-check-inline"><input class="form-check-input" type="checkbox" id="qui" value="qui"><label class="form-check-label" for="qui">Qui</label></div>
                                <div class="form-check form-check-inline"><input class="form-check-input" type="checkbox" id="sex" value="sex"><label class="form-check-label" for="sex">Sex</label></div>
                                <div class="form-check form-check-inline"><input class="form-check-input" type="checkbox" id="sab" value="sab"><label class="form-check-label" for="sab">Sáb</label></div>
                                <div class="form-check form-check-inline"><input class="form-check-input" type="checkbox" id="dom" value="dom"><label class="form-check-label" for="dom">Dom</label></div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Salvar Aula</button>
                        <button type="button" class="btn btn-secondary" id="btn-cancelar-edicao-aula" style="display: none;">Cancelar</button>
                    </form>
                    <hr class="my-4"><h6>Aulas Cadastradas</h6>
                    <div class="table-responsive"><table class="table table-hover"><thead><tr><th>Turma</th><th>Horário</th><th>Dias</th><th>Vagas</th><th>Ações</th></tr></thead><tbody id="tabela-aulas"></tbody></table></div>
                </div></div>
            </div>
            
            <!-- Aba Configurações -->
            <div class="tab-pane fade" id="config-pane" role="tabpanel">
                <div class="card border-top-0 rounded-0 rounded-bottom"><div class="card-body p-4 p-md-5">
                  <div class="row">
                      <!-- Coluna Planos -->
                      <div class="col-lg-8 mb-4 mb-lg-0">
                          <h5 class="card-title mb-3">Planos de Pagamento</h5>
                          <form id="form-plano" class="row g-2 align-items-end mb-3">
                              <input type="hidden" id="plano-id">
                              <div class="col-sm-4"><label class="form-label">Nome do Plano</label><input type="text" id="plano-nome" class="form-control" required></div>
                              <div class="col-sm-2"><label class="form-label">Valor Parcela</label><input type="number" step="0.01" id="plano-valor-parcela" class="form-control" min="0.01" required></div>
                              <div class="col-sm-2"><label class="form-label">Qtd. Parcelas</label><input type="number" id="plano-meses" class="form-control" required value="1" min="1"></div>
                              <div class="col-sm-2"><label class="form-label">Desconto (%)</label><input type="number" step="0.01" id="plano-desconto" class="form-control" placeholder="0" min="0" max="100"></div>
                              <div class="col-sm-2"><button type="submit" class="btn btn-primary w-100">Salvar</button></div>
                              <div class="col-sm-4 mt-3">
                                  <label class="form-label">Valor Total do Plano (c/ desc.)</label>
                                  <input type="text" id="plano-valor-total-calculado" class="form-control" readonly>
                              </div>
                              <div class="col-12 mt-2"><button type="button" id="btn-cancelar-edicao-plano" class="btn btn-secondary" style="display:none;">Cancelar Edição</button></div>
                          </form>
                          <div class="table-responsive"><table class="table table-hover"><thead><tr><th>Nome</th><th>Valor Parcela</th><th>Parcelas</th><th>Desconto</th><th>Total</th><th>Ações</th></tr></thead><tbody id="tabela-planos"></tbody></table></div>
                      </div>
                      <!-- Coluna Formas de Pagamento -->
                      <div class="col-lg-4">
                          <h5 class="card-title mb-3">Formas de Pagamento</h5>
                          <form id="form-formas-pagamento" class="row g-2 align-items-end mb-3">
                              <input type="hidden" id="forma-pagamento-id">
                              <div class="col"><label class="form-label">Nome da Forma</label><input type="text" id="forma-pagamento-nome" class="form-control" required></div>
                              <div class="col-auto"><button type="submit" class="btn btn-primary w-100">Salvar</button></div>
                              <div class="col-auto"><button type="button" id="btn-cancelar-edicao-forma-pagamento" class="btn btn-secondary w-100" style="display:none;">Cancelar</button></div>
                          </form>
                          <div class="table-responsive"><table class="table table-hover"><thead><tr><th>Nome</th><th>Ações</th></tr></thead><tbody id="tabela-formas-pagamento"></tbody></table></div>
                      </div>
                  </div>
                </div></div>
            </div>
        </div>
    </div> <!-- Fim #main-app-section -->


<!-- Modal de Pagamento -->
<div class="modal fade" id="modal-pagamento" tabindex="-1">
  <div class="modal-dialog"><div class="modal-content">
    <div class="modal-header"><h5 class="modal-title">Lançar Pagamento</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
    <div class="modal-body">
      <form id="form-pagamento-lancamento">
        <input type="hidden" id="pagamento-mensalidade-id">
        <p>Lançamento para: <strong id="pagamento-aluno-nome"></strong></p>
        <div class="mb-3"><label class="form-label">Valor a Pagar (R$)</label><input type="number" step="0.01" class="form-control" id="pagamento-valor" required min="0.01"></div>
        <div class="mb-3"><label class="form-label">Desconto (R$)</label><input type="number" step="0.01" class="form-control" id="pagamento-desconto" placeholder="0.00" min="0"></div>
        <div class="mb-3"><label class="form-label">Valor Final (R$)</label><input type="number" step="0.01" class="form-control" id="pagamento-valor-final" readonly></div>
        <div class="mb-3"><label class="form-label">Data do Pagamento</label><input type="date" class="form-control" id="pagamento-data" required></div>
        <div class="mb-3"><label class="form-label">Forma de Pagamento</label><select class="form-select" id="pagamento-forma" required></select></div>
        <div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button><button type="submit" class="btn btn-primary">Confirmar Pagamento</button></div>
      </form>
    </div>
  </div></div>
</div>

<!-- Modal de Confirmação Genérico -->
<div class="modal fade" id="confirmationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalTitle">Confirmar Ação</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmationModalBody">Você tem certeza que deseja prosseguir?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirmar</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container para Notificações -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <svg class="rounded me-2" width="20" height="20" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" focusable="false"><rect width="100%" height="100%" fill="#007aff"></rect></svg>
            <strong class="me-auto" id="toastTitle">Notificação</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastBody"></div>
    </div>
</div>


<!-- SCRIPTS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>

<!-- Firebase SDK v9+ (modular) -->
<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.17.1/firebase-app.js";
    import { 
        getFirestore, collection, doc, addDoc, getDocs, onSnapshot, 
        query, orderBy, where, updateDoc, deleteDoc, writeBatch, serverTimestamp, Timestamp, setDoc 
    } from "https://www.gstatic.com/firebasejs/9.17.1/firebase-firestore.js";
    import { 
        getAuth, 
        signInWithEmailAndPassword, // Alterado
        signOut,                 // Adicionado
        onAuthStateChanged       // Adicionado
    } from "https://www.gstatic.com/firebasejs/9.17.1/firebase-auth.js";

    // --- CONFIGURAÇÃO FIREBASE --------------------------------------------------
    const firebaseConfig = {
        apiKey: "AIzaSyDd5jiOWaLS0FqcHgQCneBEyL-0TRMLmG4",
        authDomain: "studio-carla-borges.firebaseapp.com",
        projectId: "studio-carla-borges",
        storageBucket: "studio-carla-borges.appspot.com",
        messagingSenderId: "898802196256",
        appId: "1:898802196256:web:fafcc7e833ed1509278145"
    };

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);

    // --- ÍCONES SVG -------------------------------------------------------------
    const ICONS = {
        edit: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="var(--cor-principal)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="action-icon"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>`,
        delete: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="var(--cor-perigo)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="action-icon"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>`,
        receipt: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#0dcaf0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="action-icon"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>`,
        pay: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="var(--cor-sucesso)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="action-icon"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>`
    };
    
    // --- ESTADO DA APLICAÇÃO ----------------------------------------------------
    const state = {
        alunos: [],
        aulas: [],
        planos: [],
        formasPagamento: [],
        mensalidades: [],
        caixa: [],
        presencas: {}, // { "YYYY-MM-DD_aulaId": { alunoId1: true, alunoId2: false, ... } }
        filtroFinanceiro: 'todos',
        firestoreListeners: [], // Para guardar os unsubscribers
    };

    // --- ELEMENTOS DO DOM -------------------------------------------------------
    const DOM = {
        initialLoading: document.getElementById('initial-loading'),
        loginSection: document.getElementById('login-section'),
        loginForm: document.getElementById('login-form'),
        loginError: document.getElementById('login-error'),
        mainAppSection: document.getElementById('main-app-section'),
        userInfo: document.getElementById('user-info'),
        userEmail: document.getElementById('user-email'),
        logoutButton: document.getElementById('logout-button'),
        // ... (todos os outros elementos DOM que já existiam)
        diaSemanaTitulo: document.getElementById('dia-da-semana-titulo'),
        programacaoDia: document.getElementById('programacao-do-dia'),
        tabelaFinanceiro: document.getElementById('tabela-financeiro'),
        filtrosFinanceiro: document.getElementById('filtros-financeiro'),
        btnGerarMensalidades: document.getElementById('btn-gerar-mensalidades'),
        resumoReceitaAulas: document.getElementById('resumo-receita-aulas'),
        resumoReceitaMatriculas: document.getElementById('resumo-receita-matriculas'),
        resumoOutrasEntradas: document.getElementById('resumo-outras-entradas'),
        resumoDespesas: document.getElementById('resumo-despesas'),
        resumoBalanco: document.getElementById('resumo-balanco'),
        resumoAReceber: document.getElementById('resumo-a-receber'),
        alertBadgeAReceber: document.getElementById('alert-badge-a-receber'),
        mesAnoFinanceiro: document.getElementById('mes-ano-financeiro'),
        formAluno: document.getElementById('form-aluno'),
        alunosCardTitle: document.getElementById('alunos-card-title'),
        alunoMatriculaValor: document.getElementById('aluno-matricula-valor'),
        alunoMatriculaIsento: document.getElementById('aluno-matricula-isento'),
        tabelaAlunos: document.getElementById('tabela-alunos'),
        selectTurmaAluno: document.getElementById('aluno-turma'),
        selectPlanoAluno: document.getElementById('aluno-plano'),
        selectBolsaAluno: document.getElementById('aluno-bolsa'),
        btnCancelarEdicaoAluno: document.getElementById('btn-cancelar-edicao-aluno'),
        formAula: document.getElementById('form-aula'),
        tabelaAulas: document.getElementById('tabela-aulas'),
        aulaVagas: document.getElementById('aula-vagas'),
        aulaDiasSemana: document.getElementById('aula-dias-semana'),
        btnCancelarEdicaoAula: document.getElementById('btn-cancelar-edicao-aula'),
        formPlano: document.getElementById('form-plano'),
        planoValorParcela: document.getElementById('plano-valor-parcela'),
        planoMeses: document.getElementById('plano-meses'),
        planoDesconto: document.getElementById('plano-desconto'),
        planoValorTotalCalculado: document.getElementById('plano-valor-total-calculado'),
        tabelaPlanos: document.getElementById('tabela-planos'),
        btnCancelarEdicaoPlano: document.getElementById('btn-cancelar-edicao-plano'),
        formFormasPagamento: document.getElementById('form-formas-pagamento'),
        tabelaFormasPagamento: document.getElementById('tabela-formas-pagamento'),
        btnCancelarEdicaoFormaPagamento: document.getElementById('btn-cancelar-edicao-forma-pagamento'),
        modalPagamento: new bootstrap.Modal(document.getElementById('modal-pagamento')),
        formPagamentoLancamento: document.getElementById('form-pagamento-lancamento'),
        pagamentoValor: document.getElementById('pagamento-valor'),
        pagamentoDesconto: document.getElementById('pagamento-desconto'),
        pagamentoValorFinal: document.getElementById('pagamento-valor-final'),
        selectFormaPagamentoModal: document.getElementById('pagamento-forma'),
        confirmationModal: new bootstrap.Modal(document.getElementById('confirmationModal')),
        confirmActionBtn: document.getElementById('confirmActionBtn'),
        toast: new bootstrap.Toast(document.getElementById('liveToast')),
        formCaixa: document.getElementById('form-caixa'),
        tabelaCaixa: document.getElementById('tabela-caixa'),
        btnCancelarEdicaoCaixa: document.getElementById('btn-cancelar-edicao-caixa'),
        relatorioMes: document.getElementById('relatorio-mes'),
        relatorioAno: document.getElementById('relatorio-ano'),
        btnGerarBalancete: document.getElementById('btn-gerar-balancete'),
        btnGerarRelatorioInadimplencia: document.getElementById('btn-gerar-relatorio-inadimplencia'),
        tabelaPrevisao: document.getElementById('tabela-previsao'),
    };

    // --- FUNÇÕES AUXILIARES ----------------------------------------------------
    
    const showToast = (message, title = "Sucesso!", type = 'success') => {
        const toastTitle = document.getElementById('toastTitle');
        const toastBody = document.getElementById('toastBody');
        const toastHeader = document.querySelector('#liveToast .toast-header');
        const toastRect = document.querySelector('#liveToast .toast-header svg rect');
        
        toastTitle.textContent = title;
        toastBody.textContent = message;
        
        toastHeader.classList.remove('bg-success', 'bg-danger', 'text-white');

        if (type === 'success') {
            toastHeader.classList.add('bg-success', 'text-white');
            toastRect.setAttribute('fill', 'var(--cor-sucesso)');
        } else {
            toastHeader.classList.add('bg-danger', 'text-white');
            toastRect.setAttribute('fill', 'var(--cor-perigo)');
        }

        DOM.toast.show();
    };
    
    const showConfirmation = (title, body, onConfirm) => {
        document.getElementById('confirmationModalTitle').textContent = title;
        document.getElementById('confirmationModalBody').textContent = body;
        
        const newConfirmBtn = DOM.confirmActionBtn.cloneNode(true);
        DOM.confirmActionBtn.parentNode.replaceChild(newConfirmBtn, DOM.confirmActionBtn);
        DOM.confirmActionBtn = newConfirmBtn;
        
        DOM.confirmActionBtn.addEventListener('click', () => {
            onConfirm();
            DOM.confirmationModal.hide();
        }, { once: true });

        DOM.confirmationModal.show();
    };

    const formatDate = (timestamp) => {
        if (!timestamp) return 'N/A';
        const date = timestamp.seconds ? new Date(timestamp.seconds * 1000) : new Date(timestamp);
        return date.toLocaleDateString('pt-BR', { timeZone: 'UTC' }); // Adicionado timeZone UTC para consistência
    };

    const formatDateISO = (date) => {
         return date.toISOString().split('T')[0]; // YYYY-MM-DD
    };
    
    const formatCurrency = (value) => (value != null ? value : 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });


    const resetForm = (formElement, btnCancel, cardTitleElement, originalTitle) => {
        formElement.reset();
        formElement.querySelector('input[type="hidden"]').value = '';
        if (btnCancel) btnCancel.style.display = 'none';
        if (cardTitleElement) cardTitleElement.textContent = originalTitle;
        const submitButton = formElement.querySelector('button[type="submit"]');
        if (submitButton && submitButton.textContent.includes('Atualizar')) {
            submitButton.textContent = submitButton.textContent.replace('Atualizar', 'Salvar');
        }
        if (formElement.id === 'form-aluno') {
            DOM.alunoMatriculaIsento.checked = false;
            DOM.alunoMatriculaValor.disabled = false;
            DOM.alunoMatriculaValor.value = '100.00';
            DOM.selectBolsaAluno.value = "0";
        }
         if (formElement.id === 'form-plano') {
            DOM.planoMeses.value = 1;
            appLogic.planos.calcularValorTotalPlanoForm();
        }
        if (formElement.id === 'form-caixa') {
            formElement.querySelector('#caixa-data').valueAsDate = new Date();
        }
    };

    // Função para aplicar máscara de telefone
    const applyPhoneMask = (input) => {
        input.addEventListener('input', (e) => {
            let value = e.target.value.replace(/\D/g, '');
            value = value.replace(/^(\d{2})(\d)/g, '($1) $2');
            value = value.replace(/(\d{5})(\d)/, '$1-$2');
            e.target.value = value.slice(0, 15); // Limita o tamanho
        });
    };
    
    // --- FUNÇÕES DE RENDERIZAÇÃO ----------------------------------------------
    
    const calcularERenderizarResumoFinanceiro = () => {
        const hoje = new Date();
        const mesAtual = hoje.getMonth();
        const anoAtual = hoje.getFullYear();

        DOM.mesAnoFinanceiro.textContent = hoje.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' }).replace(/^\w/, c => c.toUpperCase());

        // Filtra transações do mês atual
        const mensalidadesPagasMes = state.mensalidades.filter(m => {
            const dataPgto = m.dataPagamento ? new Date(m.dataPagamento.seconds * 1000) : null;
            return m.status === 'Pago' && dataPgto && dataPgto.getMonth() === mesAtual && dataPgto.getFullYear() === anoAtual;
        });
        const caixaMes = state.caixa.filter(c => {
            const dataLanc = new Date(c.data.seconds * 1000);
            return dataLanc.getMonth() === mesAtual && dataLanc.getFullYear() === anoAtual;
        });
        const mensalidadesAReceberMes = state.mensalidades.filter(m => {
             const dataVenc = new Date(m.dataVencimento.seconds * 1000);
            return m.status !== 'Pago' && dataVenc.getMonth() === mesAtual && dataVenc.getFullYear() === anoAtual;
        });


        const receitaAulas = mensalidadesPagasMes
            .filter(m => m.tipo === 'mensalidade' || !m.tipo) // !m.tipo para retrocompatibilidade
            .reduce((acc, m) => acc + (m.valorFinal || 0), 0);
        
        const receitaMatriculas = mensalidadesPagasMes
            .filter(m => m.tipo === 'matricula')
            .reduce((acc, m) => acc + (m.valorFinal || 0), 0);
            
        const outrasEntradas = caixaMes.filter(c => c.tipo === 'entrada').reduce((acc, c) => acc + c.valor, 0);
        const despesas = caixaMes.filter(c => c.tipo === 'saida').reduce((acc, c) => acc + c.valor, 0);
        const aReceber = mensalidadesAReceberMes.reduce((acc, m) => acc + (m.valorPlano || 0), 0);
        const balanco = (receitaAulas + receitaMatriculas + outrasEntradas) - despesas;
        
        // Verifica se há atrasados no mês atual para o badge de alerta
        const haAtrasadosNoMes = mensalidadesAReceberMes.some(m => new Date(m.dataVencimento.seconds * 1000) < hoje);
        DOM.alertBadgeAReceber.style.display = haAtrasadosNoMes ? 'inline-block' : 'none';

        DOM.resumoReceitaAulas.textContent = formatCurrency(receitaAulas);
        DOM.resumoReceitaMatriculas.textContent = formatCurrency(receitaMatriculas);
        DOM.resumoOutrasEntradas.textContent = formatCurrency(outrasEntradas);
        DOM.resumoDespesas.textContent = formatCurrency(despesas);
        DOM.resumoAReceber.textContent = formatCurrency(aReceber);
        DOM.resumoBalanco.textContent = formatCurrency(balanco);
        DOM.resumoBalanco.classList.toggle('text-danger', balanco < 0);
        DOM.resumoBalanco.classList.toggle('text-success', balanco >= 0);
    };


    const renderPainelDoDia = () => {
        const dias = ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sab'];
        const diasNomes = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'];
        const hoje = new Date();
        const hojeStr = formatDateISO(hoje);
        const diaDeHojeChave = dias[hoje.getDay()];
        DOM.diaSemanaTitulo.textContent = `${diasNomes[hoje.getDay()]}, ${hoje.toLocaleDateString('pt-BR')}`;
        
        const aulasDeHoje = state.aulas.filter(aula => aula.dias && aula.dias[diaDeHojeChave]).sort((a, b) => a.horario.localeCompare(b.horario));
        
        if (aulasDeHoje.length === 0) {
            DOM.programacaoDia.innerHTML = '<p class="text-center text-muted p-5">Nenhuma aula programada para hoje.</p>';
            return;
        }

        DOM.programacaoDia.innerHTML = aulasDeHoje.map(aula => {
            const alunosDaTurma = state.alunos.filter(aluno => aluno.turma === aula.nome);
            const presencaKey = `${hojeStr}_${aula.id}`;
            const presencasDoDia = state.presencas[presencaKey] || {};

            const listaAlunosHtml = alunosDaTurma.length > 0 
                ? alunosDaTurma.map(aluno => {
                    const presente = presencasDoDia[aluno.id] === true;
                    return `<li class="list-group-item d-flex justify-content-between align-items-center">
                                <span class="${presente ? 'aluno-presente' : ''}">${aluno.nome}</span>
                                <div class="form-check form-switch form-check-presenca">
                                    <input class="form-check-input" type="checkbox" role="switch" id="presenca_${aula.id}_${aluno.id}" 
                                           data-aluno-id="${aluno.id}" data-aula-id="${aula.id}" data-data="${hojeStr}" 
                                           ${presente ? 'checked' : ''} onchange="window.app.aulas.marcarPresenca(this)">
                                    <label class="form-check-label" for="presenca_${aula.id}_${aluno.id}">${presente ? 'Presente' : 'Ausente'}</label>
                                </div>
                            </li>`;
                  }).join('') 
                : '<li class="list-group-item text-muted">Nenhum aluno matriculado nesta turma.</li>';
            
            return `<div class="card mb-3">
                        <div class="card-header d-flex justify-content-between">
                            <strong>${aula.nome}</strong>
                            <span>${aula.horario}</span>
                        </div>
                        <ul class="list-group list-group-flush">${listaAlunosHtml}</ul>
                    </div>`;
        }).join('');
    };
    
    const renderTabelaFinanceiraAlunos = () => {
        const hoje = new Date();
        hoje.setHours(0, 0, 0, 0);

        const dadosFiltrados = state.mensalidades.filter(m => {
            if (state.filtroFinanceiro === 'todos') return true;
            const vencimento = new Date(m.dataVencimento.seconds * 1000);
            const status = (m.status === 'Pago') ? 'pago' : (vencimento < hoje ? 'atrasado' : 'pendente');
            return status === state.filtroFinanceiro;
        });

        if (dadosFiltrados.length === 0) {
            DOM.tabelaFinanceiro.innerHTML = '<tr><td colspan="5" class="text-center p-4">Nenhuma mensalidade encontrada para este filtro.</td></tr>';
            return;
        }
        
        DOM.tabelaFinanceiro.innerHTML = dadosFiltrados.map(m => {
            const vencimento = new Date(m.dataVencimento.seconds * 1000);
            let status = m.status;
            let statusBadge = 'bg-warning text-dark';
            
            if (status !== 'Pago') {
                if(vencimento < hoje) {
                    status = 'Atrasado';
                    statusBadge = 'bg-danger text-white';
                } else {
                    status = 'Pendente';
                }
            } else {
                 statusBadge = 'bg-success text-white';
            }
            
            const botoesAcao = (m.status === 'Pago') 
                ? `<span onclick="window.app.financeiro.gerarRecibo('${m.id}')" title="Gerar Recibo">${ICONS.receipt}</span>`
                : `<span onclick="window.app.financeiro.abrirModalPagamento('${m.id}')" title="Dar Baixa / Pagar" class="d-flex align-items-center gap-1">${ICONS.pay} Pagar</span>`;

            return `<tr>
                <td>${m.alunoNome}</td>
                <td>${vencimento.toLocaleDateString('pt-BR')}</td>
                <td>${formatCurrency(m.valorPlano)}</td>
                <td><span class="badge ${statusBadge}">${status}</span></td>
                <td>${botoesAcao}</td>
            </tr>`;
        }).join('');
    };

    const renderTabelaCaixa = () => {
        if(state.caixa.length === 0) {
            DOM.tabelaCaixa.innerHTML = '<tr><td colspan="6" class="text-center p-4">Nenhum lançamento no caixa.</td></tr>';
            return;
        }
        DOM.tabelaCaixa.innerHTML = state.caixa.map(c => {
            const tipoClasse = c.tipo === 'entrada' ? 'text-success' : 'text-danger';
            return `
            <tr>
                <td>${c.descricao}</td>
                <td>${c.categoria || '-'}</td>
                <td>${formatDate(c.data)}</td>
                <td><span class="badge ${c.tipo === 'entrada' ? 'bg-success-subtle text-success-emphasis' : 'bg-danger-subtle text-danger-emphasis'}">${c.tipo}</span></td>
                <td class="fw-bold ${tipoClasse}">${formatCurrency(c.valor)}</td>
                <td>
                    <span onclick="window.app.caixa.editar('${c.id}')" title="Editar">${ICONS.edit}</span>
                    <span onclick="window.app.caixa.deletar('${c.id}', '${c.descricao}')" title="Excluir">${ICONS.delete}</span>
                </td>
            </tr>
        `}).join('');
    };


    const renderTabelaAlunos = () => {
        if (state.alunos.length === 0) {
            DOM.tabelaAlunos.innerHTML = '<tr><td colspan="5" class="text-center p-4">Nenhum aluno cadastrado.</td></tr>';
            return;
        }
        DOM.tabelaAlunos.innerHTML = state.alunos.map(aluno => `
            <tr>
                <td>${aluno.nome}</td>
                <td>${aluno.plano}</td>
                <td>${aluno.bolsaPercentual || 0}%</td>
                <td>Dia ${aluno.diaVencimento}</td>
                <td>
                    <span onclick="window.app.alunos.editar('${aluno.id}')" title="Editar">${ICONS.edit}</span>
                    <span onclick="window.app.alunos.deletar('${aluno.id}', '${aluno.nome}')" title="Excluir">${ICONS.delete}</span>
                </td>
            </tr>
        `).join('');
    };

    const renderTabelaAulas = () => {
         if (state.aulas.length === 0) {
            DOM.tabelaAulas.innerHTML = '<tr><td colspan="5" class="text-center p-4">Nenhuma aula cadastrada.</td></tr>';
            return;
        }
        DOM.tabelaAulas.innerHTML = state.aulas.map(aula => {
            const dias = aula.dias ? Object.keys(aula.dias).filter(d => aula.dias[d]).map(d => d.charAt(0).toUpperCase() + d.slice(1)).join(', ') : 'N/D';
            const alunosMatriculados = state.alunos.filter(a => a.turma === aula.nome).length;
            const vagas = aula.vagas ? `${alunosMatriculados}/${aula.vagas}` : `${alunosMatriculados}/Ilimitado`;
            return `
                <tr>
                    <td>${aula.nome}</td>
                    <td>${aula.horario}</td>
                    <td>${dias}</td>
                    <td>${vagas}</td>
                    <td>
                        <span onclick="window.app.aulas.editar('${aula.id}')" title="Editar">${ICONS.edit}</span>
                        <span onclick="window.app.aulas.deletar('${aula.id}', '${aula.nome}')" title="Excluir">${ICONS.delete}</span>
                    </td>
                </tr>
            `;
        }).join('');
    };

    const renderTabelaPlanos = () => {
        DOM.tabelaPlanos.innerHTML = state.planos.map(plano => {
            const valorTotal = (plano.valorParcela || 0) * (plano.numeroMeses || 1);
            const valorTotalComDesconto = valorTotal * (1 - (plano.desconto || 0) / 100);
            return `
                <tr>
                    <td>${plano.nome}</td>
                    <td>${formatCurrency(plano.valorParcela)}</td>
                    <td>${plano.numeroMeses}</td>
                    <td>${plano.desconto || 0}%</td>
                    <td>${formatCurrency(valorTotalComDesconto)}</td>
                    <td>
                        <span onclick="window.app.planos.editar('${plano.id}')" title="Editar">${ICONS.edit}</span>
                        <span onclick="window.app.planos.deletar('${plano.id}', '${plano.nome}')" title="Excluir">${ICONS.delete}</span>
                    </td>
                </tr>
            `
        }).join('');
    };

    const renderTabelaFormasPagamento = () => {
        DOM.tabelaFormasPagamento.innerHTML = state.formasPagamento.map(forma => `
            <tr>
                <td>${forma.nome}</td>
                <td>
                    <span onclick="window.app.formasPagamento.editar('${forma.id}')" title="Editar">${ICONS.edit}</span>
                    <span onclick="window.app.formasPagamento.deletar('${forma.id}', '${forma.nome}')" title="Excluir">${ICONS.delete}</span>
                </td>
            </tr>
        `).join('');
    };

    const popularSelects = () => {
        DOM.selectTurmaAluno.innerHTML = '<option selected disabled value="">Selecione...</option>';
        state.aulas.forEach(aula => {
            const alunosMatriculados = state.alunos.filter(a => a.turma === aula.nome).length;
            const vagasInfo = aula.vagas ? `(${alunosMatriculados}/${aula.vagas})` : '';
            const option = new Option(`${aula.nome} ${vagasInfo} (${aula.horario})`, aula.nome);
            // Desabilita opção se a turma estiver lotada E não for edição (pois o aluno já ocupa uma vaga)
            if(aula.vagas && alunosMatriculados >= aula.vagas && !DOM.formAluno['aluno-id'].value) {
                option.disabled = true;
            }
            DOM.selectTurmaAluno.add(option);
        });
        DOM.selectPlanoAluno.innerHTML = '<option selected disabled value="">Selecione...</option>';
        state.planos.forEach(plano => {
            const valorParcelaComDesconto = (plano.valorParcela || 0) * (1 - (plano.desconto || 0) / 100);
            const option = new Option(`${plano.nome} (${formatCurrency(valorParcelaComDesconto)}/mês)`, plano.nome);
            DOM.selectPlanoAluno.add(option);
        });
        DOM.selectFormaPagamentoModal.innerHTML = '';
        state.formasPagamento.forEach(forma => {
            const option = new Option(forma.nome, forma.nome);
            DOM.selectFormaPagamentoModal.add(option);
        });
    };
    
    const renderPrevisao = () => {
        const receitaBaseMensal = state.alunos.reduce((acc, aluno) => {
            const plano = state.planos.find(p => p.nome === aluno.plano);
            if (!plano) return acc;
            
            const valorParcelaPlano = (plano.valorParcela || 0) * (1 - (plano.desconto || 0) / 100);
            const valorFinalComBolsa = valorParcelaPlano * (1 - (aluno.bolsaPercentual || 0) / 100);
            
            return acc + valorFinalComBolsa;
        }, 0);

        let html = '';
        const hoje = new Date();
        for (let i = 1; i <= 6; i++) {
            const dataFutura = new Date(hoje.getFullYear(), hoje.getMonth() + i, 1);
            const nomeMes = dataFutura.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric'});
            html += `<tr><td>${nomeMes.charAt(0).toUpperCase() + nomeMes.slice(1)}</td><td>${formatCurrency(receitaBaseMensal)}</td></tr>`;
        }
        DOM.tabelaPrevisao.innerHTML = html;
    };
    
    const popularFiltrosRelatorio = () => {
        const meses = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];
        const hoje = new Date();
        const anoAtual = hoje.getFullYear();
        const mesAtual = hoje.getMonth();

        DOM.relatorioMes.innerHTML = meses.map((mes, index) => `<option value="${index}" ${index === mesAtual ? 'selected' : ''}>${mes}</option>`).join('');
        
        DOM.relatorioAno.innerHTML = '';
        for (let i = anoAtual; i >= anoAtual - 5; i--) {
            DOM.relatorioAno.add(new Option(i, i));
        }
    };


    // --- LÓGICA DE NEGÓCIO (Agrupada por módulo) --------------------------------
    
    const appLogic = {

        // --- Alunos ---
        alunos: {
            handleForm: async (e) => {
                e.preventDefault();
                const id = e.target['aluno-id'].value;
                const matriculaIsenta = DOM.alunoMatriculaIsento.checked;
                const matriculaValor = matriculaIsenta ? 0 : parseFloat(DOM.alunoMatriculaValor.value || 0);

                const alunoData = {
                    nome: e.target['aluno-nome'].value,
                    telefone: e.target['aluno-telefone'].value,
                    diaVencimento: parseInt(e.target['aluno-dia-vencimento'].value),
                    turma: e.target['aluno-turma'].value,
                    plano: e.target['aluno-plano'].value,
                    bolsaPercentual: parseInt(DOM.selectBolsaAluno.value),
                    matriculaIsenta: matriculaIsenta,
                    matriculaValor: matriculaValor,
                    dataCadastro: serverTimestamp() // Importante para a lógica de recorrência
                };
                
                 // Validação de vagas
                if (!id) { // Só valida ao criar novo
                    const aulaSelecionada = state.aulas.find(a => a.nome === alunoData.turma);
                    if (aulaSelecionada && aulaSelecionada.vagas) {
                         const alunosNaTurma = state.alunos.filter(a => a.turma === alunoData.turma).length;
                         if (alunosNaTurma >= aulaSelecionada.vagas) {
                             showToast(`A turma "${alunoData.turma}" está lotada! Matricule com atenção.`, "Aviso", "warning");
                             // Não impede, apenas avisa
                         }
                    }
                }

                try {
                    if (id) {
                        delete alunoData.dataCadastro; 
                        await updateDoc(doc(db, 'alunos', id), alunoData);
                        showToast('Aluno atualizado com sucesso!');
                    } else {
                        const docRef = await addDoc(collection(db, 'alunos'), alunoData);
                        showToast('Aluno salvo com sucesso! Gerando cobranças iniciais...');
                        alunoData.id = docRef.id;
                        alunoData.dataCadastro = { seconds: Date.now() / 1000 }; 
                        await appLogic.financeiro.gerarCobrancasIniciais(alunoData);
                    }
                    resetForm(DOM.formAluno, DOM.btnCancelarEdicaoAluno, DOM.alunosCardTitle, 'Cadastro de Alunos');
                } catch (error) {
                    console.error("Erro ao salvar aluno: ", error);
                    showToast('Erro ao salvar aluno.', 'Erro', 'error');
                }
            },

            editar: (id) => {
                const aluno = state.alunos.find(a => a.id === id);
                if (!aluno) return;
                DOM.formAluno['aluno-id'].value = id;
                DOM.formAluno['aluno-nome'].value = aluno.nome;
                DOM.formAluno['aluno-telefone'].value = aluno.telefone;
                DOM.formAluno['aluno-dia-vencimento'].value = aluno.diaVencimento;
                DOM.formAluno['aluno-turma'].value = aluno.turma;
                DOM.formAluno['aluno-plano'].value = aluno.plano;
                DOM.selectBolsaAluno.value = aluno.bolsaPercentual || "0";
                DOM.alunoMatriculaIsento.checked = aluno.matriculaIsenta || false;
                DOM.alunoMatriculaValor.value = aluno.matriculaValor || '';
                DOM.alunoMatriculaValor.disabled = DOM.alunoMatriculaIsento.checked;
                DOM.btnCancelarEdicaoAluno.style.display = 'inline-block';
                DOM.alunosCardTitle.textContent = 'Editando Aluno';
                DOM.formAluno.querySelector('button[type="submit"]').textContent = 'Atualizar Aluno';
                new bootstrap.Tab(document.getElementById('alunos-tab')).show();
                DOM.formAluno['aluno-nome'].focus();
            },

            deletar: (id, nome) => {
                appLogic.utils.deletarGeneric(id, nome, 'alunos', 'Aluno');
            },
        },

        // --- Aulas ---
        aulas: {
            handleForm: async (e) => {
                e.preventDefault();
                const id = e.target['aula-id'].value;
                const dias = {};
                DOM.aulaDiasSemana.querySelectorAll('input[type="checkbox"]').forEach(c => { dias[c.value] = c.checked; });
                const aulaData = {
                    nome: e.target['aula-nome'].value,
                    horario: e.target['aula-horario'].value,
                    vagas: parseInt(DOM.aulaVagas.value) || null, // null se vazio
                    dias: dias
                };

                try {
                    if(id) {
                        await updateDoc(doc(db, 'aulas', id), aulaData);
                        showToast('Aula atualizada com sucesso!');
                    } else {
                        await addDoc(collection(db, 'aulas'), aulaData);
                        showToast('Aula salva com sucesso!');
                    }
                    resetForm(DOM.formAula, DOM.btnCancelarEdicaoAula);
                } catch (error) {
                    console.error("Erro ao salvar aula: ", error);
                    showToast('Erro ao salvar aula.', 'Erro', 'error');
                }
            },

            editar: (id) => {
                const aula = state.aulas.find(a => a.id === id);
                if (!aula) return;
                DOM.formAula['aula-id'].value = id;
                DOM.formAula['aula-nome'].value = aula.nome;
                DOM.formAula['aula-horario'].value = aula.horario;
                DOM.aulaVagas.value = aula.vagas || '';
                DOM.aulaDiasSemana.querySelectorAll('input[type="checkbox"]').forEach(c => {
                    c.checked = aula.dias ? (aula.dias[c.value] || false) : false;
                });
                DOM.btnCancelarEdicaoAula.style.display = 'inline-block';
                DOM.formAula.querySelector('button[type="submit"]').textContent = 'Atualizar Aula';
                new bootstrap.Tab(document.getElementById('aulas-tab')).show();
            },

            deletar: (id, nome) => {
                appLogic.utils.deletarGeneric(id, nome, 'aulas', 'Aula');
            },

            marcarPresenca: async (checkbox) => {
                const alunoId = checkbox.dataset.alunoId;
                const aulaId = checkbox.dataset.aulaId;
                const data = checkbox.dataset.data;
                const presente = checkbox.checked;
                const label = checkbox.nextElementSibling;

                const presencaKey = `${data}_${aulaId}`;
                
                // Atualiza estado local primeiro para feedback rápido
                if (!state.presencas[presencaKey]) {
                    state.presencas[presencaKey] = {};
                }
                state.presencas[presencaKey][alunoId] = presente;
                
                // Atualiza UI
                label.textContent = presente ? 'Presente' : 'Ausente';
                const alunoSpan = checkbox.closest('li').querySelector('span:first-child');
                alunoSpan.classList.toggle('aluno-presente', presente);

                try {
                    // Salva no Firestore
                    const presencaDocRef = doc(db, 'presencas', presencaKey);
                    const updateData = {};
                    updateData[alunoId] = presente; // Campo com ID do aluno
                    
                    // Usar set com merge para criar ou atualizar o campo do aluno sem sobrescrever outros
                    await setDoc(presencaDocRef, updateData, { merge: true });
                    
                } catch (error) {
                    console.error("Erro ao salvar presença:", error);
                    showToast("Erro ao salvar presença.", "Erro", "error");
                    // Reverte a UI em caso de erro
                    checkbox.checked = !presente;
                    label.textContent = !presente ? 'Presente' : 'Ausente';
                    alunoSpan.classList.toggle('aluno-presente', !presente);
                    // Reverte estado local
                    state.presencas[presencaKey][alunoId] = !presente; 
                }
            }
        },
        
        // --- Planos ---
        planos: {
             calcularValorTotalPlanoForm: () => {
                const valorParcela = parseFloat(DOM.planoValorParcela.value) || 0;
                const meses = parseInt(DOM.planoMeses.value) || 1;
                const desconto = parseFloat(DOM.planoDesconto.value) || 0;
                const valorTotal = valorParcela * meses;
                const valorTotalComDesconto = valorTotal * (1 - desconto / 100);
                DOM.planoValorTotalCalculado.value = formatCurrency(valorTotalComDesconto);
            },
            
            handleForm: async (e) => {
                e.preventDefault();
                const form = e.target;
                const id = form['plano-id'].value;
                const planoData = {
                    nome: form['plano-nome'].value,
                    valorParcela: parseFloat(DOM.planoValorParcela.value),
                    numeroMeses: parseInt(DOM.planoMeses.value),
                    desconto: parseFloat(DOM.planoDesconto.value) || 0
                };
                try {
                    if(id) {
                        await updateDoc(doc(db, 'planos', id), planoData);
                        showToast('Plano atualizado com sucesso!');
                    } else {
                        await addDoc(collection(db, 'planos'), planoData);
                        showToast('Plano salvo com sucesso!');
                    }
                    resetForm(form, form.querySelector('button[type="button"]'));
                } catch (error) {
                    console.error('Erro ao salvar plano:', error);
                    showToast('Erro ao salvar plano.', 'Erro', 'error');
                }
            },

            editar: (id) => {
                const item = state.planos.find(i => i.id === id);
                if(!item) return;
                const form = DOM.formPlano;
                form['plano-id'].value = item.id;
                form['plano-nome'].value = item.nome;
                DOM.planoValorParcela.value = item.valorParcela;
                DOM.planoMeses.value = item.numeroMeses;
                DOM.planoDesconto.value = item.desconto;
                form.querySelector('button[type="button"]').style.display = 'inline-block';
                form.querySelector('button[type="submit"]').textContent = 'Atualizar';
                appLogic.planos.calcularValorTotalPlanoForm();
                new bootstrap.Tab(document.getElementById('config-tab')).show();
            },
            
             deletar: (id, nome) => {
                appLogic.utils.deletarGeneric(id, nome, 'planos', 'Plano');
            },
        },
        
        // --- Formas de Pagamento ---
        formasPagamento: {
            handleForm: async (e) => {
                e.preventDefault();
                const form = e.target;
                const id = form['forma-pagamento-id'].value;
                const nome = form['forma-pagamento-nome'].value;
                try {
                    if(id) {
                        await updateDoc(doc(db, 'formasDePagamento', id), { nome });
                        showToast('Forma de Pagamento atualizada com sucesso!');
                    } else {
                        await addDoc(collection(db, 'formasDePagamento'), { nome });
                        showToast('Forma de Pagamento salva com sucesso!');
                    }
                    resetForm(form, form.querySelector('button[type="button"]'));
                } catch (error) {
                    console.error('Erro ao salvar forma de pagamento:', error);
                    showToast('Erro ao salvar forma de pagamento.', 'Erro', 'error');
                }
            },

            editar: (id) => {
                const item = state.formasPagamento.find(i => i.id === id);
                if(!item) return;
                const form = DOM.formFormasPagamento;
                form['forma-pagamento-id'].value = item.id;
                form['forma-pagamento-nome'].value = item.nome;
                form.querySelector('button[type="button"]').style.display = 'inline-block';
                form.querySelector('button[type="submit"]').textContent = 'Atualizar';
                new bootstrap.Tab(document.getElementById('config-tab')).show();
            },
            
            deletar: (id, nome) => {
                appLogic.utils.deletarGeneric(id, nome, 'formasDePagamento', 'Forma de Pagamento');
            },
        },

        // --- Financeiro (Mensalidades, Pagamentos, Relatórios) ---
        financeiro: {
            abrirModalPagamento: (mensalidadeId) => {
                const mensalidade = state.mensalidades.find(m => m.id === mensalidadeId);
                DOM.formPagamentoLancamento.reset();
                document.getElementById('pagamento-mensalidade-id').value = mensalidadeId;
                document.getElementById('pagamento-aluno-nome').textContent = mensalidade.alunoNome;
                DOM.pagamentoValor.value = mensalidade.valorPlano.toFixed(2);
                document.getElementById('pagamento-data').valueAsDate = new Date();
                appLogic.financeiro.calcularValorFinalPagamento(); // Calcula o valor inicial
                DOM.modalPagamento.show();
            },
            
            calcularValorFinalPagamento: () => {
                const valor = parseFloat(DOM.pagamentoValor.value) || 0;
                const desconto = parseFloat(DOM.pagamentoDesconto.value) || 0;
                DOM.pagamentoValorFinal.value = (valor - desconto).toFixed(2);
            },

            handlePagamentoForm: async (e) => {
                e.preventDefault();
                const mensalidadeId = document.getElementById('pagamento-mensalidade-id').value;
                const valorPago = parseFloat(DOM.pagamentoValor.value);
                const desconto = parseFloat(DOM.pagamentoDesconto.value) || 0;

                const updateData = {
                    status: 'Pago',
                    valorPago: valorPago,
                    desconto: desconto,
                    valorFinal: valorPago - desconto,
                    dataPagamento: Timestamp.fromDate(new Date(document.getElementById('pagamento-data').value + 'T12:00:00')), // Add time to avoid timezone issues
                    formaPagamento: document.getElementById('pagamento-forma').value
                };
                try {
                    await updateDoc(doc(db, 'mensalidades', mensalidadeId), updateData);
                    showToast('Pagamento salvo com sucesso!');
                    DOM.modalPagamento.hide();
                } catch (error) {
                    console.error("Erro ao salvar pagamento: ", error);
                    showToast('Erro ao salvar pagamento.', 'Erro', 'error');
                }
            },

            gerarCobrancasIniciais: async (aluno) => { // Movido para cá
                // (Mesma lógica da versão anterior)
                try {
                    const batch = writeBatch(db);
                    const mensalidadesCollection = collection(db, "mensalidades");
                    const hoje = new Date();

                    if (!aluno.matriculaIsenta && aluno.matriculaValor > 0) {
                        const matriculaRef = doc(mensalidadesCollection);
                        batch.set(matriculaRef, {
                            alunoId: aluno.id, alunoNome: `Matrícula - ${aluno.nome}`, dataVencimento: Timestamp.fromDate(hoje), status: 'Pendente', valorPlano: aluno.matriculaValor, tipo: 'matricula', mesAnoReferencia: `${hoje.getFullYear()}-${String(hoje.getMonth() + 1).padStart(2, '0')}`
                        });
                    }
                    const planoAluno = state.planos.find(p => p.nome === aluno.plano);
                    if (!planoAluno) throw new Error(`Plano "${aluno.plano}" não encontrado.`);
                    
                    const valorParcelaPlano = (planoAluno.valorParcela || 0) * (1 - (planoAluno.desconto || 0) / 100);
                    const valorFinalComBolsa = valorParcelaPlano * (1 - (aluno.bolsaPercentual || 0) / 100);
                    const dataVencimentoMensalidade = new Date(hoje.getFullYear(), hoje.getMonth(), aluno.diaVencimento);
                    
                    const mensalidadeRef = doc(mensalidadesCollection);
                    batch.set(mensalidadeRef, {
                        alunoId: aluno.id, alunoNome: aluno.nome, dataVencimento: Timestamp.fromDate(dataVencimentoMensalidade), status: 'Pendente', valorPlano: valorFinalComBolsa, tipo: 'mensalidade', mesAnoReferencia: `${dataVencimentoMensalidade.getFullYear()}-${String(dataVencimentoMensalidade.getMonth() + 1).padStart(2, '0')}`
                    });
                    await batch.commit();
                 } catch (error) {
                     console.error("Erro ao gerar cobranças iniciais:", error);
                     showToast(`Erro: ${error.message}`, 'Erro', 'error');
                 }
            },

            gerarMensalidadesRecorrentes: () => {
                 showConfirmation('Gerar Mensalidades', 'Isso irá verificar todos os alunos e gerar quaisquer mensalidades pendentes até o mês atual. Deseja continuar?', async () => {
                    DOM.initialLoading.style.display = 'flex';
                    let mensalidadesGeradas = 0;
                    
                    try {
                        const batch = writeBatch(db);
                        const mensalidadesCollection = collection(db, "mensalidades");
                        
                        for (const aluno of state.alunos) {
                            if (!aluno.dataCadastro || !aluno.plano) continue; 
                            const planoAluno = state.planos.find(p => p.nome === aluno.plano);
                            if (!planoAluno) continue;

                            const mensalidadesAluno = state.mensalidades.filter(m => m.alunoId === aluno.id && m.tipo === 'mensalidade').sort((a,b) => b.dataVencimento.seconds - a.dataVencimento.seconds);
                            
                            let dataUltimaMensalidade;
                             if (mensalidadesAluno.length > 0) {
                                dataUltimaMensalidade = new Date(mensalidadesAluno[0].dataVencimento.seconds * 1000);
                             } else if (aluno.dataCadastro.seconds) {
                                dataUltimaMensalidade = new Date(aluno.dataCadastro.seconds * 1000);
                                // Se a data de cadastro for depois do dia do vencimento no mês, a primeira mensalidade já foi criada, então começamos do mês seguinte
                                if(dataUltimaMensalidade.getDate() > aluno.diaVencimento) {
                                     dataUltimaMensalidade.setMonth(dataUltimaMensalidade.getMonth() + 1);
                                }
                             } else {
                                continue; // Pula se não tiver nem mensalidade anterior nem data de cadastro válida
                             }

                            let proximaData = new Date(dataUltimaMensalidade.getFullYear(), dataUltimaMensalidade.getMonth() + 1, aluno.diaVencimento);
                            const hoje = new Date();

                            while(proximaData <= hoje) {
                                 const valorParcelaPlano = (planoAluno.valorParcela || 0) * (1 - (planoAluno.desconto || 0) / 100);
                                 const valorFinalComBolsa = valorParcelaPlano * (1 - (aluno.bolsaPercentual || 0) / 100);
                                 
                                 const newMensalidadeRef = doc(mensalidadesCollection);
                                 batch.set(newMensalidadeRef, {
                                     alunoId: aluno.id, alunoNome: aluno.nome, dataVencimento: Timestamp.fromDate(proximaData), status: 'Pendente', valorPlano: valorFinalComBolsa, tipo: 'mensalidade', mesAnoReferencia: `${proximaData.getFullYear()}-${String(proximaData.getMonth() + 1).padStart(2, '0')}`
                                 });
                                 mensalidadesGeradas++;
                                 proximaData.setMonth(proximaData.getMonth() + 1);
                            }
                        }

                        if (mensalidadesGeradas > 0) {
                            await batch.commit();
                            showToast(`${mensalidadesGeradas} nova(s) mensalidade(s) gerada(s) com sucesso!`);
                        } else {
                            showToast('Nenhuma nova mensalidade precisou ser gerada. Tudo em dia!', 'Aviso', 'success');
                        }

                    } catch(error) {
                        console.error("Erro ao gerar mensalidades:", error);
                        showToast('Ocorreu um erro ao gerar as mensalidades.', 'Erro', 'error');
                    } finally {
                        DOM.initialLoading.style.display = 'none';
                    }
                });
            },


            gerarRecibo: (mensalidadeId) => {
                const mensalidade = state.mensalidades.find(m => m.id === mensalidadeId);
                if (!mensalidade) return;

                const { jsPDF } = window.jspdf;
                const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a5' }); // A5: 148 x 210 mm
                const hoje = new Date().toLocaleDateString('pt-BR', { day: '2-digit', month: 'long', year: 'numeric' });
                const primaryColor = '#4A90E2';
                const textColor = '#343A40';
                const grayColor = '#868e96';
                const pageWidth = 148;
                const margin = 10;

                doc.setDrawColor(primaryColor); doc.setLineWidth(1); doc.rect(5, 5, pageWidth - 10, 200);
                doc.setFont('helvetica', 'bold'); doc.setFontSize(18); doc.setTextColor(primaryColor); doc.text('Studio Carla Borges', pageWidth / 2, 20, { align: 'center' });
                doc.setFont('helvetica', 'normal'); doc.setFontSize(10); doc.setTextColor(grayColor); doc.text('RECIBO DE PAGAMENTO', pageWidth / 2, 28, { align: 'center' });
                doc.setLineWidth(0.5); doc.setDrawColor(primaryColor); doc.line(margin + 10, 32, pageWidth - margin - 10, 32);
                doc.setTextColor(textColor); doc.setFontSize(11);
                let y = 45;
                doc.setFont('helvetica', 'bold'); doc.text('Recebemos de:', margin, y); doc.setFont('helvetica', 'normal'); doc.text(mensalidade.alunoNome.replace('Matrícula - ', ''), margin + 35, y); y += 10;
                doc.setFont('helvetica', 'bold'); doc.text('A importância de:', margin, y); doc.setFont('helvetica', 'normal'); doc.text(formatCurrency(mensalidade.valorFinal), margin + 35, y); y += 15;
                doc.setFont('helvetica', 'bold'); doc.text('DETALHES DA COBRANÇA', margin, y); y += 4; doc.setLineWidth(0.2); doc.setDrawColor(grayColor); doc.line(margin, y, pageWidth - margin, y); y += 7;
                const addDetailRow = (label, value) => { doc.setFont('helvetica', 'bold'); doc.text(label, margin + 5, y); doc.setFont('helvetica', 'normal'); doc.text(value, margin + 45, y); y += 7; };
                const descricao = mensalidade.tipo === 'matricula' ? 'Matrícula' : `Mensalidade ${mensalidade.mesAnoReferencia.split('-').reverse().join('/')}`;
                addDetailRow('Descrição:', descricao); addDetailRow('Valor Original:', formatCurrency(mensalidade.valorPlano)); if (mensalidade.desconto > 0) { addDetailRow('Desconto Aplicado:', formatCurrency(mensalidade.desconto)); }
                addDetailRow('Valor Final Pago:', formatCurrency(mensalidade.valorFinal)); addDetailRow('Data do Pagamento:', formatDate(mensalidade.dataPagamento)); addDetailRow('Forma de Pagamento:', mensalidade.formaPagamento);
                y += 20; doc.setFontSize(10); doc.setTextColor(grayColor); doc.text(`Contagem, ${hoje}.`, pageWidth / 2, y, { align: 'center' }); y += 25;
                doc.setFont('Times', 'italic'); doc.setFontSize(16); doc.setTextColor(textColor); doc.text('Carla Borges', pageWidth / 2, y, { align: 'center' }); y += 3;
                doc.setLineWidth(0.3); doc.setDrawColor(textColor); doc.line(pageWidth / 2 - 25, y, pageWidth / 2 + 25, y); doc.setFont('helvetica', 'normal'); doc.setFontSize(8); doc.text('Studio Carla Borges', pageWidth / 2, y + 4, { align: 'center' });
                doc.save(`Recibo_${mensalidade.alunoNome.replace(/ /g, '_')}.pdf`);
            },
            
            gerarBalancete: () => {
                 const mes = parseInt(DOM.relatorioMes.value);
                 const ano = parseInt(DOM.relatorioAno.value);
                 const nomeMes = DOM.relatorioMes.options[DOM.relatorioMes.selectedIndex].text;
                 const inicioPeriodo = new Date(ano, mes, 1);
                 const fimPeriodo = new Date(ano, mes + 1, 0, 23, 59, 59);
                 const entradas = []; const saidas = [];
                 
                 state.mensalidades.forEach(m => {
                     if(m.status === 'Pago' && m.dataPagamento) {
                         const dataPgto = new Date(m.dataPagamento.seconds * 1000);
                         if (dataPgto >= inicioPeriodo && dataPgto <= fimPeriodo) { entradas.push({ data: dataPgto, descricao: `Pgto: ${m.alunoNome}`, categoria: (m.tipo === 'matricula' ? 'Matrícula' : 'Mensalidade'), valor: m.valorFinal }); }
                     }
                 });
                 state.caixa.forEach(c => {
                     const dataLanc = new Date(c.data.seconds * 1000);
                     if (dataLanc >= inicioPeriodo && dataLanc <= fimPeriodo) {
                         if (c.tipo === 'entrada') { entradas.push({ data: dataLanc, descricao: c.descricao, categoria: c.categoria || 'Outros', valor: c.valor }); } 
                         else { saidas.push({ data: dataLanc, descricao: c.descricao, categoria: c.categoria || 'Outros', valor: c.valor }); }
                     }
                 });
                 const totalEntradas = entradas.reduce((acc, item) => acc + item.valor, 0);
                 const totalSaidas = saidas.reduce((acc, item) => acc + item.valor, 0);
                 const saldo = totalEntradas - totalSaidas;
                 
                 const { jsPDF } = window.jspdf; const doc = new jsPDF();
                 doc.setFontSize(18); doc.text(`Balancete Financeiro - ${nomeMes} de ${ano}`, 14, 22);
                 const canvas = document.createElement('canvas'); canvas.width = 400; canvas.height = 200; const ctx = canvas.getContext('2d');
                 const reportChart = new Chart(ctx, { type: 'doughnut', data: { labels: [`Entradas (${formatCurrency(totalEntradas)})`, `Saídas (${formatCurrency(totalSaidas)})`], datasets: [{ data: [totalEntradas, totalSaidas], backgroundColor: [ 'rgba(25, 135, 84, 0.7)', 'rgba(220, 53, 69, 0.7)' ], borderColor: [ 'rgba(25, 135, 84, 1)', 'rgba(220, 53, 69, 1)' ], borderWidth: 1 }] }, options: { responsive: false, animation: { duration: 0 }, plugins: { legend: { position: 'right' } } } });

                setTimeout(() => {
                    const chartImage = canvas.toDataURL('image/png'); reportChart.destroy();
                    let y = 40; doc.setFontSize(11); doc.setFont('helvetica', 'bold'); doc.text('Resumo do Período', 14, y); y += 7; doc.setFont('helvetica', 'normal');
                    doc.text(`Total de Entradas: ${formatCurrency(totalEntradas)}`, 14, y); y += 6; doc.text(`Total de Saídas: ${formatCurrency(totalSaidas)}`, 14, y); y += 2; doc.setLineWidth(0.2); doc.line(14, y, 90, y); y += 6;
                    doc.setFont('helvetica', 'bold'); doc.setTextColor(saldo >= 0 ? 34 : 220, saldo >= 0 ? 34 : 53, saldo >= 0 ? 34 : 69); doc.text(`Saldo Final: ${formatCurrency(saldo)}`, 14, y); doc.setTextColor(0,0,0);
                    if(totalEntradas > 0 || totalSaidas > 0) { doc.addImage(chartImage, 'PNG', 105, 40, 90, 45); }
                    const startYTables = 100;
                    if (entradas.length > 0) { doc.autoTable({ startY: startYTables, head: [['Data', 'Descrição', 'Categoria', 'Valor (R$)']], body: entradas.sort((a,b) => a.data - b.data).map(e => [e.data.toLocaleDateString('pt-BR'), e.descricao, e.categoria, e.valor.toFixed(2).replace('.', ',')]), theme: 'striped', headStyles: { fillColor: [25, 135, 84] }, didDrawPage: (data) => { doc.setFontSize(14); doc.text('DETALHAMENTO DE ENTRADAS', 14, data.cursor.y - 10); } }); } else { doc.text('Nenhuma entrada registrada no período.', 14, startYTables); }
                    const startYSaidas = entradas.length > 0 ? doc.autoTable.previous.finalY + 15 : startYTables + 15;
                    if(saidas.length > 0) { doc.autoTable({ startY: startYSaidas, head: [['Data', 'Descrição', 'Categoria', 'Valor (R$)']], body: saidas.sort((a,b) => a.data - b.data).map(s => [s.data.toLocaleDateString('pt-BR'), s.descricao, s.categoria, s.valor.toFixed(2).replace('.', ',')]), theme: 'striped', headStyles: { fillColor: [220, 53, 69] }, didDrawPage: (data) => { doc.setFontSize(14); doc.text('DETALHAMENTO DE SAÍDAS', 14, data.cursor.y - 10); } }); } else { doc.text('Nenhuma saída registrada no período.', 14, startYSaidas); }
                    doc.save(`Balancete_${nomeMes}_${ano}.pdf`);
                }, 500);
            },
            
            gerarRelatorioInadimplencia: () => {
                const hoje = new Date(); hoje.setHours(0,0,0,0);
                const inadimplentes = state.mensalidades.filter(m => m.status !== 'Pago' && new Date(m.dataVencimento.seconds * 1000) < hoje);
                
                if (inadimplentes.length === 0) {
                    showToast("Nenhum aluno inadimplente encontrado!", "Informação", "info");
                    return;
                }

                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                const dataGeracao = new Date().toLocaleDateString('pt-BR');

                doc.setFontSize(18); doc.text(`Relatório de Inadimplência`, 14, 22);
                doc.setFontSize(11); doc.text(`Gerado em: ${dataGeracao}`, 14, 28);

                const head = [['Aluno', 'Descrição', 'Vencimento', 'Dias Atraso', 'Valor Devido (R$)']];
                const body = inadimplentes
                    .sort((a, b) => a.dataVencimento.seconds - b.dataVencimento.seconds) // Ordena por vencimento
                    .map(m => {
                        const vencimento = new Date(m.dataVencimento.seconds * 1000);
                        const diasAtraso = Math.floor((hoje - vencimento) / (1000 * 60 * 60 * 24));
                        const descricao = m.tipo === 'matricula' ? 'Matrícula' : `Mensalidade ${m.mesAnoReferencia.split('-').reverse().join('/')}`;
                        return [
                            m.alunoNome.replace('Matrícula - ', ''),
                            descricao,
                            vencimento.toLocaleDateString('pt-BR'),
                            diasAtraso,
                            m.valorPlano.toFixed(2).replace('.', ',')
                        ];
                    });

                doc.autoTable({
                    startY: 40,
                    head: head,
                    body: body,
                    theme: 'striped',
                    headStyles: { fillColor: [220, 53, 69] } // Vermelho
                });

                const totalDevido = inadimplentes.reduce((acc, m) => acc + m.valorPlano, 0);
                doc.setFontSize(12);
                doc.setFont('helvetica', 'bold');
                doc.text(`Total Devido: ${formatCurrency(totalDevido)}`, 14, doc.autoTable.previous.finalY + 10);

                doc.save(`Relatorio_Inadimplencia_${dataGeracao}.pdf`);
            },
        },
        
         // --- Caixa ---
        caixa: {
            handleForm: async (e) => {
                e.preventDefault();
                const form = e.target;
                const id = form['caixa-id'].value;
                const caixaData = {
                    descricao: form['caixa-descricao'].value,
                    valor: parseFloat(form['caixa-valor'].value),
                    data: Timestamp.fromDate(new Date(form['caixa-data'].value + 'T12:00:00')), // Add time to avoid timezone issues
                    categoria: form['caixa-categoria'].value || 'Outros',
                    tipo: form['caixa-tipo'].value,
                };

                try {
                    if (id) {
                        await updateDoc(doc(db, 'caixa', id), caixaData);
                        showToast('Lançamento atualizado com sucesso!');
                    } else {
                        await addDoc(collection(db, 'caixa'), caixaData);
                        showToast('Lançamento salvo com sucesso!');
                    }
                    resetForm(DOM.formCaixa, DOM.btnCancelarEdicaoCaixa);
                } catch (error) {
                    console.error("Erro ao salvar lançamento no caixa:", error);
                    showToast("Erro ao salvar lançamento.", "Erro", "error");
                }
            },
            
            editar: (id) => {
                const item = state.caixa.find(c => c.id === id);
                if (!item) return;

                const form = DOM.formCaixa;
                form['caixa-id'].value = id;
                form['caixa-descricao'].value = item.descricao;
                form['caixa-valor'].value = item.valor;
                form['caixa-data'].valueAsDate = new Date(item.data.seconds * 1000);
                form['caixa-categoria'].value = item.categoria || '';
                form['caixa-tipo'].value = item.tipo;
                
                DOM.btnCancelarEdicaoCaixa.style.display = 'block';
                form.querySelector('button[type="submit"]').textContent = 'Atualizar';
                new bootstrap.Tab(document.getElementById('caixa-tab')).show();
                form['caixa-descricao'].focus();
            },

            deletar: (id, descricao) => {
                appLogic.utils.deletarGeneric(id, descricao, 'caixa', 'Lançamento de Caixa');
            },
        },
        
        // --- Utilitários ---
        utils: {
             deletarGeneric: (id, nome, collectionName, singularName) => {
                showConfirmation(`Deletar ${singularName}`, `Tem certeza que deseja deletar ${nome}?`, async () => {
                    try {
                        await deleteDoc(doc(db, collectionName, id));
                        showToast(`${singularName} deletado com sucesso!`);
                    } catch (error) {
                        console.error(`Erro ao deletar ${singularName}:`, error);
                        showToast(`Erro ao deletar ${singularName}.`, 'Erro', 'error');
                    }
                });
            },
        },

        // --- Autenticação ---
        auth: {
            handleLogin: async (e) => {
                e.preventDefault();
                const email = DOM.loginForm['login-email'].value;
                const password = DOM.loginForm['login-password'].value;
                DOM.loginError.style.display = 'none';
                DOM.initialLoading.style.display = 'flex'; // Mostra loading durante o login

                try {
                    await signInWithEmailAndPassword(auth, email, password);
                    // Sucesso: onAuthStateChanged vai cuidar de mostrar o app
                } catch (error) {
                    console.error("Erro de login:", error.code, error.message);
                    let friendlyMessage = "Erro ao fazer login. Verifique seu e-mail e senha.";
                    if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential') {
                        friendlyMessage = "E-mail ou senha inválidos.";
                    } else if (error.code === 'auth/invalid-email') {
                         friendlyMessage = "Formato de e-mail inválido.";
                    }
                    DOM.loginError.textContent = friendlyMessage;
                    DOM.loginError.style.display = 'block';
                } finally {
                     DOM.initialLoading.style.display = 'none'; // Esconde loading
                }
            },

            handleLogout: async () => {
                 DOM.initialLoading.style.display = 'flex'; // Mostra loading durante o logout
                try {
                    await signOut(auth);
                    // Sucesso: onAuthStateChanged vai cuidar de mostrar o login
                } catch (error) {
                    console.error("Erro ao fazer logout:", error);
                    showToast("Erro ao sair.", "Erro", "error");
                } finally {
                     DOM.initialLoading.style.display = 'none'; // Esconde loading
                }
            },
            
            // Função para iniciar os listeners do Firestore
            initializeFirestoreListeners: () => {
                 // Limpa listeners antigos antes de criar novos
                appLogic.auth.detachFirestoreListeners(); 
                
                console.log("Inicializando listeners do Firestore...");

                const commonErrorHandler = (collectionName) => (error) => {
                    console.error(`Erro no listener de ${collectionName}:`, error);
                    // Poderia adicionar um toast aqui se quisesse notificar o usuário
                };

                // Adiciona cada unsubscribe à lista
                state.firestoreListeners.push(onSnapshot(query(collection(db, 'alunos'), orderBy('nome')), (snapshot) => { state.alunos = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); renderTabelaAlunos(); renderPainelDoDia(); renderPrevisao(); popularSelects(); }, commonErrorHandler('Alunos')));
                state.firestoreListeners.push(onSnapshot(query(collection(db, 'aulas'), orderBy('horario')), (snapshot) => { state.aulas = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); renderTabelaAulas(); renderPainelDoDia(); popularSelects(); }, commonErrorHandler('Aulas')));
                state.firestoreListeners.push(onSnapshot(query(collection(db, 'planos'), orderBy('nome')), (snapshot) => { state.planos = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); renderTabelaPlanos(); popularSelects(); renderPrevisao(); }, commonErrorHandler('Planos')));
                state.firestoreListeners.push(onSnapshot(query(collection(db, 'formasDePagamento'), orderBy('nome')), (snapshot) => { state.formasPagamento = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); renderTabelaFormasPagamento(); popularSelects(); }, commonErrorHandler('Formas de Pagamento')));
                state.firestoreListeners.push(onSnapshot(query(collection(db, 'mensalidades'), orderBy('dataVencimento', 'desc')), (snapshot) => { state.mensalidades = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); renderTabelaFinanceiraAlunos(); calcularERenderizarResumoFinanceiro(); }, commonErrorHandler('Mensalidades')));
                state.firestoreListeners.push(onSnapshot(query(collection(db, 'caixa'), orderBy('data', 'desc')), (snapshot) => { state.caixa = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); renderTabelaCaixa(); calcularERenderizarResumoFinanceiro(); }, commonErrorHandler('Caixa')));
                state.firestoreListeners.push(onSnapshot(collection(db, 'presencas'), (snapshot) => { state.presencas = {}; snapshot.docs.forEach(doc => { state.presencas[doc.id] = doc.data(); }); renderPainelDoDia(); }, commonErrorHandler('Presenças')));
                
                // Esconde o loading inicial APÓS iniciar os listeners
                DOM.initialLoading.style.display = 'none';
            },

            // Função para remover os listeners do Firestore
            detachFirestoreListeners: () => {
                console.log("Removendo listeners do Firestore...");
                state.firestoreListeners.forEach(unsubscribe => unsubscribe());
                state.firestoreListeners = []; // Limpa a lista
            }
        }
    };
    
    // Tornar funções acessíveis globalmente (para `onclick` e `onchange` no HTML)
    window.app = {
        alunos: { editar: appLogic.alunos.editar, deletar: appLogic.alunos.deletar },
        aulas: { editar: appLogic.aulas.editar, deletar: appLogic.aulas.deletar, marcarPresenca: appLogic.aulas.marcarPresenca },
        planos: { editar: appLogic.planos.editar, deletar: appLogic.planos.deletar },
        formasPagamento: { editar: appLogic.formasPagamento.editar, deletar: appLogic.formasPagamento.deletar },
        financeiro: { abrirModalPagamento: appLogic.financeiro.abrirModalPagamento, gerarRecibo: appLogic.financeiro.gerarRecibo },
        caixa: { editar: appLogic.caixa.editar, deletar: appLogic.caixa.deletar },
    };
    
    // --- INICIALIZAÇÃO E LISTENERS GLOBAIS -------------------------------------
    document.addEventListener('DOMContentLoaded', () => {
        // Mostra loading inicial
        DOM.initialLoading.style.display = 'flex'; 
        
        // Forms
        DOM.formAluno.addEventListener('submit', appLogic.alunos.handleForm);
        DOM.formAula.addEventListener('submit', appLogic.aulas.handleForm);
        DOM.formPlano.addEventListener('submit', appLogic.planos.handleForm);
        DOM.formFormasPagamento.addEventListener('submit', appLogic.formasPagamento.handleForm);
        DOM.formPagamentoLancamento.addEventListener('submit', appLogic.financeiro.handlePagamentoForm);
        DOM.formCaixa.addEventListener('submit', appLogic.caixa.handleForm);
        DOM.loginForm.addEventListener('submit', appLogic.auth.handleLogin); // Login

        // Inputs com cálculos dinâmicos
        DOM.pagamentoValor.addEventListener('input', appLogic.financeiro.calcularValorFinalPagamento);
        DOM.pagamentoDesconto.addEventListener('input', appLogic.financeiro.calcularValorFinalPagamento);
        DOM.planoValorParcela.addEventListener('input', appLogic.planos.calcularValorTotalPlanoForm);
        DOM.planoMeses.addEventListener('input', appLogic.planos.calcularValorTotalPlanoForm);
        DOM.planoDesconto.addEventListener('input', appLogic.planos.calcularValorTotalPlanoForm);

        // Botões Cancelar Edição
        DOM.btnCancelarEdicaoAluno.addEventListener('click', () => resetForm(DOM.formAluno, DOM.btnCancelarEdicaoAluno, DOM.alunosCardTitle, 'Cadastro de Alunos'));
        DOM.btnCancelarEdicaoAula.addEventListener('click', () => resetForm(DOM.formAula, DOM.btnCancelarEdicaoAula));
        DOM.btnCancelarEdicaoPlano.addEventListener('click', () => resetForm(DOM.formPlano, DOM.btnCancelarEdicaoPlano));
        DOM.btnCancelarEdicaoFormaPagamento.addEventListener('click', () => resetForm(DOM.formFormasPagamento, DOM.btnCancelarEdicaoFormaPagamento));
        DOM.btnCancelarEdicaoCaixa.addEventListener('click', () => resetForm(DOM.formCaixa, DOM.btnCancelarEdicaoCaixa));
        
        // Outros Listeners
        DOM.alunoMatriculaIsento.addEventListener('change', (e) => { DOM.alunoMatriculaValor.disabled = e.target.checked; if (e.target.checked) DOM.alunoMatriculaValor.value = ''; });
        DOM.filtrosFinanceiro.addEventListener('click', (e) => { if (e.target.matches('button[data-filtro]')) { DOM.filtrosFinanceiro.querySelector('.active').classList.remove('active'); e.target.classList.add('active'); state.filtroFinanceiro = e.target.dataset.filtro; renderTabelaFinanceiraAlunos(); } });
        DOM.btnGerarMensalidades.addEventListener('click', appLogic.financeiro.gerarMensalidadesRecorrentes);
        DOM.btnGerarBalancete.addEventListener('click', appLogic.financeiro.gerarBalancete);
        DOM.btnGerarRelatorioInadimplencia.addEventListener('click', appLogic.financeiro.gerarRelatorioInadimplencia);
        DOM.logoutButton.addEventListener('click', appLogic.auth.handleLogout); // Logout
        
        applyPhoneMask(DOM.formAluno['aluno-telefone']); // Aplica máscara ao telefone
        popularFiltrosRelatorio();
        resetForm(DOM.formCaixa);
        
        // --- Listener Central de Autenticação ---
        onAuthStateChanged(auth, (user) => {
            if (user) {
                // Usuário está logado
                console.log("Usuário logado:", user.email);
                DOM.loginSection.style.display = 'none';
                DOM.mainAppSection.style.display = 'block';
                DOM.userInfo.style.display = 'block';
                DOM.userEmail.textContent = user.email;
                
                // Inicia os listeners do Firestore APÓS o login
                appLogic.auth.initializeFirestoreListeners(); 

            } else {
                // Usuário está deslogado
                console.log("Usuário deslogado.");
                DOM.loginSection.style.display = 'block';
                DOM.mainAppSection.style.display = 'none';
                DOM.userInfo.style.display = 'none';
                DOM.userEmail.textContent = '';
                DOM.initialLoading.style.display = 'none'; // Esconde loading se estava visível

                // Remove os listeners do Firestore ao deslogar
                appLogic.auth.detachFirestoreListeners();
                
                // Limpa o estado local para não mostrar dados antigos se outro usuário logar
                 Object.keys(state).forEach(key => {
                    if(Array.isArray(state[key])) state[key] = [];
                    else if (typeof state[key] === 'object' && state[key] !== null) state[key] = {};
                });
                state.filtroFinanceiro = 'todos'; // Reset filtro
                // Limpa as tabelas na interface
                DOM.tabelaAlunos.innerHTML = '';
                DOM.tabelaAulas.innerHTML = '';
                DOM.tabelaPlanos.innerHTML = '';
                DOM.tabelaFormasPagamento.innerHTML = '';
                DOM.tabelaFinanceiro.innerHTML = '';
                DOM.tabelaCaixa.innerHTML = '';
                DOM.programacaoDia.innerHTML = '';
                DOM.tabelaPrevisao.innerHTML = '';
                // Limpa selects (exceto opções default)
                DOM.selectTurmaAluno.innerHTML = '<option selected disabled value="">Selecione...</option>';
                DOM.selectPlanoAluno.innerHTML = '<option selected disabled value="">Selecione...</option>';
                 
            }
        }, (error) => {
            // Erro no listener de autenticação (raro, mas possível)
            console.error("Erro no listener de autenticação:", error);
            DOM.initialLoading.style.display = 'none';
            DOM.loginSection.style.display = 'block'; // Mostra login em caso de erro
            DOM.loginError.textContent = "Erro ao verificar autenticação. Tente novamente.";
            DOM.loginError.style.display = 'block';
        });

    });
</script>

</body>
</html>

